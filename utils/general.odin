package utils

import "core:fmt"
import "core:unicode"
import "core:time"
import "core:strconv"
import "core:mem"
import "shared:imgui"


ascii_hex_char_to_int :: proc(c: u8) -> u8 {
    if c >= '0' && c <= '9' do return  c - '0'
    if c >= 'A' && c <= 'F' do return (c - 'A') + 10
    if c >= 'a' && c <= 'f' do return (c - 'a') + 10
    return 0
}
ascii_hex_string_to_bytes :: proc(str: []u8, buf: []u8) -> int {
    if (len(str) & 1) == 1 {
        // fmt.println("Error, ascii hex string cannot contain an odd number of characters.")
        return -1
    }
    output_size := len(str) / 2
    if output_size > len(buf) {
        // fmt.println("Error, output buffer is too small. Required", output_size, "bytes but only", len(buf), "bytes available.")
        return -1
    }
    for i in 0..<output_size {
        nib1 := ascii_hex_char_to_int(str[i*2    ])
        nib2 := ascii_hex_char_to_int(str[i*2 + 1])
        buf[i] = (nib1 << 4) | nib2
    }
    return output_size
}

bytes_to_ascii_hex_string :: proc(buf: string, str: []u8) -> (bytes_written: int) {
    nibble_to_ascii_hex := [16] u8 {
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F',
    }
    output_size := len(buf) * 2
    if output_size > len(str) do return -1
    for i := 0; i < output_size; i += 2 {
        j := i / 2
        str[i    ] = nibble_to_ascii_hex[0x0F & (buf[j] >> 4)]
        str[i + 1] = nibble_to_ascii_hex[0x0F &  buf[j]      ]
    }
    return output_size
}

ascii_to_ebcdic_table : [256] u8 : {
    0x00, 0x01, 0x02, 0x03, 0x1A, 0x09, 0x1A, 0x7F,     0x1A, 0x1A, 0x1A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
    0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26,     0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F, 
    0x40, 0x4F, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D,     0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61, 
    0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,     0xF8, 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F, 
    0x7C, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,     0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 
    0xD7, 0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6,     0xE7, 0xE8, 0xE9, 0x4A, 0xE0, 0x5A, 0x5F, 0x6D, 
    0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,     0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 
    0x97, 0x98, 0x99, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,     0xA7, 0xA8, 0xA9, 0xC0, 0x6A, 0xD0, 0xA1, 0x07,

    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,     0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,     0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,     0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,     0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,     0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,     0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,     0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
    0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,     0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 
}
ascii_to_ebcdic_bytes :: proc(b: []u8) {
    lookup := ascii_to_ebcdic_table
    for i in 0..<len(b) {
        b[i] = lookup[b[i]]
    }
}
ascii_to_ebcdic_string :: proc(s: string, allocator := context.allocator) -> string {
    lookup := ascii_to_ebcdic_table
    b, _ := make([]u8, len(s), allocator) 
    for i in 0..<len(s) {
        b[i] = lookup[u8(s[i])]
    }
    return string(b)
}

ebcdic_to_ascii_table : [256] u8 : {
    0x00, 0x01, 0x02, 0x03, 0x1A, 0x09, 0x1A, 0x7F,     0x1A, 0x1A, 0x1A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 
    0x10, 0x11, 0x12, 0x13, 0x1A, 0x1A, 0x08, 0x1A,     0x18, 0x19, 0x1A, 0x1A, 0x1C, 0x1D, 0x1E, 0x1F, 
    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x0A, 0x17, 0x1B,     0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x05, 0x06, 0x07, 
    0x1A, 0x1A, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x04,     0x1A, 0x1A, 0x1A, 0x1A, 0x14, 0x15, 0x1A, 0x1A, 
    0x20, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,     0x1A, 0x1A, 0x5B, 0x2E, 0x3C, 0x28, 0x2B, 0x21, 
    0x26, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,     0x1A, 0x1A, 0x5D, 0x24, 0x2A, 0x29, 0x3B, 0x5E, 
    0x2D, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,     0x1A, 0x1A, 0x7C, 0x2C, 0x25, 0x5F, 0x3E, 0x3F, 
    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,     0x1A, 0x60, 0x3A, 0x23, 0x40, 0x27, 0x3D, 0x22, 
    
    0x1A, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,     0x68, 0x69, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
    0x1A, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,     0x71, 0x72, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
    0x1A, 0x7E, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,     0x79, 0x7A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,     0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
    0x7B, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,     0x48, 0x49, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
    0x7D, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,     0x51, 0x52, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
    0x5C, 0x1A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,     0x59, 0x5A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,     0x38, 0x39, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
}
ebcdic_to_ascii_bytes :: proc(b: []u8) {
    lookup := ebcdic_to_ascii_table
    for i in 0..<len(b) {
        b[i] = lookup[b[i]]
    }
}
ebcdic_to_ascii_string :: proc(s: string, allocator := context.allocator) -> string {
    lookup := ebcdic_to_ascii_table
    bytes, _ := make([]u8, len(s), allocator) 
    for i in 0..<len(s) {
        bytes[i] = lookup[u8(s[i])]
    }
    return string(bytes)
}

left_pad :: proc(dst: [] u8, src: string, pad_char : u8 = ' ') -> bool {
    diff := len(dst) - len(src)
    if diff < 0 do return false
    mem.copy(mem.ptr_offset(raw_data(dst), diff), raw_data(src), len(src))
    mem.set(raw_data(dst), pad_char, diff)
    return true
}

// write an integer into a buffer and then left-pad the result
itoa_left_pad :: proc(dst: [] u8, n: int, radix := 10, pad_char : u8 = '0') -> bool {
    src := strconv.append_int(dst, i64(n), radix)
    if len(src) == 0 do return false
    return left_pad(dst[:], src, pad_char)
}

bcd_to_int2 :: proc(
    bytes      : string, 
    trim_left  := false, 
    trim_right := false,
) -> int {
    value := 0
    scale := 1

    // Extracted the first iteration of the loop so that we can conditionally skip the rightmost nibble
    i := len(bytes) - 1
    if !trim_right {
        value += scale * int(0x0F & (bytes[i]     ))
        scale *= 10
    }
    value += scale * int(0x0F & (bytes[i] >> 4))
    scale *= 10
    i -= 1

    // TODO: rewrite this whole proc, this sucks and is incorrect. Can't trim left on one-byte inputs.
    // fix for one-byte inputs
    if i < 0 {
        return value
    }

    // Iterate over nibbles in reverse order, summing value
    for ; i >= 1; i -= 1 {
        value += scale * int(0x0F & (bytes[i]     ))
        scale *= 10
        value += scale * int(0x0F & (bytes[i] >> 4))
        scale *= 10
    }

    // Extracted the last iteration of the loop so that we can conditionally skip the leftmost nibble
    value += scale * int(0x0F & (bytes[i]     ))
    scale *= 10
    if !trim_left {
        value += scale * int(0x0F & (bytes[i] >> 4))
        scale *= 10
    }

    return value
}

bcd_to_int :: proc(
    bytes      : string, 
    trim_left  := false, 
    trim_right := false,
) -> int {
    value := 0
    scale := 1

    unpacked := make([]u8, len(bytes) * 2, context.temp_allocator)

    for i in 0..<len(bytes) {
        unpacked[i*2+0] = 0xF & (bytes[i] >> 4)
        unpacked[i*2+1] = 0xF & (bytes[i] >> 0)
    }

    if trim_left  do unpacked = unpacked[1:]
    if trim_right do unpacked = unpacked[:len(unpacked)-1]

    #reverse for n in unpacked {
        value += int(n) * scale
        scale *= 10
    }

    return value
}


int_to_bcd :: proc(value: int, bytes: []u8, right_pad := false, nibble_count := 0) -> int {
    value := value
    if right_pad do value *= 10 // galaxy brain (this is actually retarded)

    // if nibble count is provided, use that value so that result will be properly padded
    nibble_count := nibble_count
    if nibble_count == 0 {
        temp := value
        for {
            nibble_count += 1
            temp /= 10
            if temp == 0 do break
        }
    }

    byte_count := (nibble_count + int(bool(nibble_count & 1))) / 2
    if len(bytes) < byte_count do return -1

    mem.set(&bytes[0], 0, len(bytes))

    power := 1
    for i := byte_count-1; i >= 0; i -= 1 {
    // for i := 0; i < byte_count; i += 1 {
        bytes[i] = u8( (((value / (power     )) % 10)      ) |
                       (((value / (power * 10)) % 10) << 4 ) )
        power *= 100
    }

    return byte_count;
}

